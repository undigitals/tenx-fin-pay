import { IATMLocationsRequest } from 'store/user/atmLocations/atmLocations.types';
import { TGroupName } from 'store/video/video.types';

export const API_ROUTES = {
  auth: {
    zendeskToken: '/auth/zendesk-token',
    estatementIframeUrl: '/auth/estatement/iframe-url',
    login: '/auth/login',
    logout: '/auth/logout',
    refreshToken: '/auth/refresh',
    forgotPassword: {
      init: '/auth/forgot-password',
      generateCode: '/auth/forgot-password/generate-code',
      checkCode: '/auth/forgot-password/check-code',
      finish: '/auth/forgot-password/finish',
    },
    forgotUsername: {
      init: '/auth/forgot-user',
    },
    validateEmail: {
      generateCode: '/auth/validate-email/generate-code',
      checkCode: '/auth/validate-email/check-code',
    },
    register: {
      generateCode: '/auth/register/generate-code',
      checkCode: '/auth/register/check-code',
      finish: '/auth/register/finish',
    },
    otpSeed: {
      requestNew: '/auth/otp-seed/request-new',
      generateCode: '/auth/otp-seed/generate-code',
      finish: '/auth/otp-seed/finish',
    },
    truliooToken: '/auth/trulioo-token',
  },
  trulioo: {
    embedIds: (truliooAccessToken: string, id: string) => `/trulioo/${truliooAccessToken}/trulioo-api/embedids/tokens/${id}`,
    saveTransaction: (truliooAccessToken: string, experienceTransactionId: string) => `/trulioo/${truliooAccessToken}/save_transaction/${experienceTransactionId}`,
    transactionsCheck: (experienceTransactionId: string) => `/trulioo/transactions/${experienceTransactionId}/check`,
    transactionsLatest: '/trulioo/transactions/latest',
    validateUserInfo: '/trulioo/verify',
    docv2: {
      getShortCode: '/trulioo/short-code',
      saveTransaction: (transactionId: string) => `/trulioo/docv2/save-transaction/${transactionId}`,
    },
  },
  user: {
    user: '/user',
    allAlerts: '/user/all-alerts',
    getCurrent: '/user/client',
    directDeposit: '/user/direct-deposit',
    getIsEmailVerified: '/user/is-email-verified',
    changePassword: '/user/change-password',
    thirdPartyIds: '/user/third-party-ids',
    consents: {
      consents: '/user/consents',
      consentStatusById: (disclaimerId: string) => `/user/consents/${disclaimerId}/status`,
      consentByFlowName: (flowName: string) => `/user/consents/${flowName}`,
      consentById: (consentId: string) => `/user/consents/${consentId}`,
      enrollConsents: '/user/consents/EWAEnroll',
      tenxPlayDisclosure: '/user/consents/TenxPlay',
      sendByEmail: (consentId: string) => `/user/consents/${consentId}/email`,
    },
    properties: {
      allProperties: '/user/properties',
      property: (propertyName: string) => `/user/properties/${propertyName}`,
      UIPreference: '/user/properties/UIPreference',
      onboardingPreferences: '/user/properties/OnboardingPreferences',
      tenxPay: '/user/properties/tenxPay',
      language: '/user/properties/language',
    },
    attune: {
      quizResult: (attuneQuizId: string) => `/user/attune-quizes/${attuneQuizId}/results`,
    },
    changeEmail: {
      generate: '/user/change-email/generate-code',
      finish: '/user/change-email/finish',
    },
    changePhone: {
      generate: '/user/change-phone/generate-code',
      finish: '/user/change-phone/finish',
    },
    accounts: {
      accounts: '/user/accounts',
      thirdParty: '/user/accounts/third-party',
      inviteJointAccountHolder: '/user/accounts/invite-joint-account-holder',
      jointAccountHolderInvites: '/user/accounts/joint-account-holder-invites',
      acceptJointAccountHolder: '/user/accounts/accept-joint-account-holder',
      addJointAccountHolder: '/user/accounts/add-joint-account-holder',
      thirdPartyValidate: '/user/accounts/third-party/validate',
      transfer: '/user/accounts/transfer',
      accountById: (accountId: string) => `/user/accounts/${accountId}`,
      accountTransactions: (accountId: string, accountType: string, dateFrom: string, dateTo: string) =>
        `/user/accounts/${accountId}/transactions?accountType=${accountType}&dateFrom=${dateFrom}&dateTo=${dateTo}`,
      features: (id: string) => `/user/accounts/${id}/features`,
    },
    documentRequests: '/user/document-requests',
    uploadRequestedDocuments: '/user/upload-requested-documents',
    delete: '/user',
    kyc: '/user/kyc-status',
    atmLocations: (filterData: IATMLocationsRequest) => `/user/atm/latitude/${filterData.latitude}/longitude/${filterData.longitude}`,
    atmByAddress: '/user/atm/address',
    truvToken: '/user/truv',
    checkFree: '/user/check-free',
    notifications: '/user/notifications',
  },
  users: {
    alerts: (id: string) => `/users/${id}/alerts`,
  },
  zogo: {
    allPoints: '/zogo/all-points',
    points: '/zogo/points',
    skills: '/zogo/skills',
    modules: '/zogo/modules',
    token: '/zogo/token',
  },
  chat: {
    intents: '/chat/intents',
    conversations: '/chat/conversations',
    messages: (id: string) => `/chat/conversations/${id}/activities`,
    reconnect: (id: string) => `/chat/conversations/${id}/reconnect`,
    end: (id: string) => `/chat/conversations/${id}/end`,
    intentGroups: '/chat/intent-groups',
    intentGroupById: (groupId: string) => `/chat/intent-groups/${groupId}`,
    intentQuestions: (intentName: string) => `/chat/intents/${intentName}/questions`,
    intentTestingResults: `/chat/intent-testing-results`,
  },
  immediate: {
    consents: '/immediate/consents',
    updateConsentByPolicy: (policyId: string) => `/immediate/consents/${policyId}`,
    enroll: '/immediate/enroll',
    eulaPolicies: '/immediate/policies/Eula',
    timeEntries: '/immediate/time-entries',
    login: '/immediate/login',
    accounts: '/immediate/accounts',
    preparePayment: '/immediate/prepare-payment',
    requestPayment: '/immediate/request-payment',
    walletAccounts: '/immediate/accounts',
    paymentInfo: '/immediate/payment-info',
    payHistory: (rangeType: string) => `/immediate/history?rangeType=${rangeType}`,
  },
  disclaimers: {
    privacyPolicyDisclosure: '/disclaimers/privacy',
    termsOfUseDisclosure: '/disclaimers/terms-of-use',
  },
  test: {
    testChecksum: '/test/test-checksum',
    testChecksumPost: '/test/test-checksum-post',
  },
  ingo: {
    iframeUrl: '/ingo/iframe-url',
    transferToExternalAccount: '/ingo/transfer-to-external-account',
    transferFromExternalAccount: '/ingo/transfer-from-external-account',
    riskSession: '/ingo/risk-session',
  },
  updateUserData: (id: string) => `users/${id}`,
  userInvites: '/user-invites',
  USPSValidateAddress: '/usps/validate',
  history: '/history',
  menu: '/menu-hierarchy/tree',
  video: (groupName: TGroupName) => `/user/videos/${groupName}`,
};
